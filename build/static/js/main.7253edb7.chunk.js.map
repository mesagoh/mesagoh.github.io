{"version":3,"sources":["ImageCredits.js","App.js","serviceWorker.js","index.js"],"names":["ImageCredits","className","id","href","this","props","userlink","username","Component","unsplash","Unsplash","applicationId","secret","App","onClickHandler","navigator","share","canShare","title","url","then","console","log","catch","error","componentDidMount","photos","getRandomPhoto","width","height","query","state","searchKeyword","toJson","json","setState","urls","custom","user","name","links","html","data-action","src","alt","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"iUAGqBA,G,uLAGb,OACI,yBAAKC,UAAU,gBACX,uBAAGC,GAAI,WAAWC,KAAQC,KAAKC,MAAMC,UAAWF,KAAKC,MAAME,SAA3D,KADJ,mB,GAJ8BC,cCEpCC,EAAW,IAAIC,IAAS,CAC5BC,cAAe,mEACfC,OAAQ,qEAuEKC,E,YAnEb,aAAe,IAAD,8BACZ,+CASFC,eAAiB,WACXC,UAAUC,MACZD,UAAUE,SAAS,CACjBC,MAAO,cACPC,IAAK,8BACJC,KAAK,WACNC,QAAQC,IAAI,yBAEbC,MAAMF,QAAQG,OAEfH,QAAQC,IAAI,mBApBF,EAwBdG,kBAAoB,WAClBhB,EAASiB,OAAOC,eAAe,CAAEC,MAAM,IAAKC,OAAO,IAAKC,MAAO,EAAKC,MAAMC,gBACzEZ,KAAKa,UACLb,KAAK,SAAAc,GACJ,EAAKC,SAAS,CACZhB,IAAKe,EAAKE,KAAKC,OACf9B,SAAU2B,EAAKI,KAAKC,KACpBjC,SAAU4B,EAAKM,MAAMC,OAEtBpB,QAAQC,IAAIY,GACZb,QAAQC,IAAI,EAAKS,MAAMxB,aAhC1B,EAAKwB,MAAQ,CACXZ,IAAK,GACLZ,SAAU,GACVD,SAAU,GACV0B,cAAe,YANL,E,sEAuCZ,OACE,yBAAK/B,UAAU,OACb,4BAAQA,UAAU,UAAlB,qBAGA,yBAAKA,UAAU,QACf,uBAAGE,KAAK,0CAA0CuC,cAAY,wBAE5D,yBACAC,IAAKvC,KAAK2B,MAAMZ,IAChByB,IAAKxC,KAAK2B,MAAMC,cAChBa,QAASzC,KAAKU,kBAId,kBAAC,EAAD,CACEP,SAAUH,KAAK2B,MAAMxB,SACrBD,SAAUF,KAAK2B,MAAMzB,YAGzB,yBAAKL,UAAU,UAAf,aACa,KADb,QACuB,uBAAGC,GAAG,cAAcC,KAAK,6BAAzB,iBADvB,gB,GA5DUK,aCEEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBvC,WACrBA,UAAUwC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC,iB","file":"static/js/main.7253edb7.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './ImageCredits.css';\n\nexport default class ImageCredits extends Component {\n\n    render() {\n        return(\n            <div className=\"imageCredits\">\n                <a id =\"userLink\" href = {this.props.userlink}>{this.props.username} </a> / Unsplash\n            </div>\n        );\n    }\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport Unsplash , {toJson} from 'unsplash-js';\nimport ImageCredits from './ImageCredits';\n\nconst unsplash = new Unsplash({\n  applicationId: \"3039697e14f11da7d872ff9adbe6cf251f1796791d531c97c82874c8beb4ff7f\",\n  secret: \"2f4ccf420a9a9291efc571fff88d05dc6cb4b0b90cec8a4a03a121d97062a6a3\"\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      url: \"\",\n      username: \"\",\n      userlink: \"\",\n      searchKeyword: \"new year\"\n    }\n  }\n\n  onClickHandler = () => {\n    if (navigator.share) {\n      navigator.canShare({\n        title: \"mesa's page\", \n        url: 'https://mesagoh.github.io'\n      }).then(() => {\n        console.log(\"Thanks for sharing!\");\n      })\n      .catch(console.error);\n    } else {\n      console.log(\"not shareable!\");\n    }\n  }\n\n  componentDidMount = () => {\n    unsplash.photos.getRandomPhoto({ width:400, height:400, query: this.state.searchKeyword})\n    .then(toJson)\n    .then(json => {\n      this.setState({\n        url: json.urls.custom,\n        username: json.user.name,\n        userlink: json.links.html\n      })\n       console.log(json);\n       console.log(this.state.username);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"header\">\n          Good Morning POTD\n        </header>\n        <div className=\"body\">\n        <a href=\"whatsapp://send?text=The text to share!\" data-action=\"share/whatsapp/share\">\n\n          <img \n          src={this.state.url} \n          alt={this.state.searchKeyword} \n          onClick={this.onClickHandler}\n          />\n        </a>\n\n          <ImageCredits\n            username={this.state.username}\n            userlink={this.state.userlink}\n          />\n        </div>\n        <div className=\"footer\">\n          Made with {\"<3\"} by  <a id=\"websiteLink\" href=\"https://mesagoh.github.io\"> Melissa Goh </a> , 2019\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}